import { Key, ReactNode, Ref } from "react";
import { CustomProps } from "./CreatedInstance";
import { ModelProps } from "./model";
import { DynamicTerrain as ExtensionsDynamicTerrain } from "./extensions/DynamicTerrain";
import { AbstractScene as BabylonjsCoreAbstractScene } from "@babylonjs/core/abstractScene";
import { Node as BabylonjsCoreNode } from "@babylonjs/core/node";
import { Scene as BabylonjsCoreScene } from "@babylonjs/core/scene";
import { Camera as BabylonjsCoreCamera } from "@babylonjs/core/Cameras/camera";
import { DebugLayerTab as BabylonjsCoreDebugLayerTab } from "@babylonjs/core/Debug/debugLayer";
import { DualShockButton as BabylonjsCoreDualShockButton, DualShockDpad as BabylonjsCoreDualShockDpad } from "@babylonjs/core/Gamepads/dualShockGamepad";
import { Xbox360Button as BabylonjsCoreXbox360Button, Xbox360Dpad as BabylonjsCoreXbox360Dpad } from "@babylonjs/core/Gamepads/xboxGamepad";
import { EnvironmentHelper as BabylonjsCoreEnvironmentHelper, IEnvironmentHelperOptions as BabylonjsCoreIEnvironmentHelperOptions } from "@babylonjs/core/Helpers/environmentHelper";
import { Light as BabylonjsCoreLight } from "@babylonjs/core/Lights/light";
import { SceneLoaderAnimationGroupLoadingMode as BabylonjsCoreSceneLoaderAnimationGroupLoadingMode } from "@babylonjs/core/Loading/sceneLoader";
import { Material as BabylonjsCoreMaterial } from "@babylonjs/core/Materials/material";
import { Space as BabylonjsCoreSpace } from "@babylonjs/core/Maths/math.axis";
import { Orientation as BabylonjsCoreOrientation } from "@babylonjs/core/Maths/math.path";
import { Mesh as BabylonjsCoreMesh } from "@babylonjs/core/Meshes/mesh";
import { MeshBuilder as BabylonjsCoreMeshBuilder } from "@babylonjs/core/Meshes/meshBuilder";
import { AssetTaskState as BabylonjsCoreAssetTaskState } from "@babylonjs/core/Misc/assetsManager";
import { InspectableType as BabylonjsCoreInspectableType, IInspectable as BabylonjsCoreIInspectable } from "@babylonjs/core/Misc/iInspectable";
import { JoystickAxis as BabylonjsCoreJoystickAxis } from "@babylonjs/core/Misc/virtualJoystick";
import { PointColor as BabylonjsCorePointColor } from "@babylonjs/core/Particles/pointsCloudSystem";
import { SubEmitterType as BabylonjsCoreSubEmitterType } from "@babylonjs/core/Particles/subEmitter";
import { PhysicsRadialImpulseFalloff as BabylonjsCorePhysicsRadialImpulseFalloff, PhysicsUpdraftMode as BabylonjsCorePhysicsUpdraftMode } from "@babylonjs/core/Physics/physicsHelper";
import { PhysicsImpostor as BabylonjsCorePhysicsImpostor, IPhysicsEnabledObject as BabylonjsCoreIPhysicsEnabledObject, PhysicsImpostorParameters as BabylonjsCorePhysicsImpostorParameters } from "@babylonjs/core/Physics/physicsImpostor";
import { DepthOfFieldEffectBlurLevel as BabylonjsCoreDepthOfFieldEffectBlurLevel } from "@babylonjs/core/PostProcesses/depthOfFieldEffect";
import { TonemappingOperator as BabylonjsCoreTonemappingOperator } from "@babylonjs/core/PostProcesses/tonemapPostProcess";
import { WebXRState as BabylonjsCoreWebXRState } from "@babylonjs/core/XR/webXRTypes";
import { AdvancedDynamicTexture as BabylonjsGuiAdvancedDynamicTexture, IFocusableControl as BabylonjsGuiIFocusableControl } from "@babylonjs/gui/2D/advancedDynamicTexture";
import { GUI3DManager as BabylonjsGuiGUI3DManager } from "@babylonjs/gui/3D/gui3DManager";
import { VRExperienceHelper as BabylonjsCoreVRExperienceHelper, OnAfterEnteringVRObservableEvent as BabylonjsCoreOnAfterEnteringVRObservableEvent, VRExperienceHelperOptions as BabylonjsCoreVRExperienceHelperOptions } from "@babylonjs/core/Cameras/VR/vrExperienceHelper";
import { PoseEnabledControllerType as BabylonjsCorePoseEnabledControllerType } from "@babylonjs/core/Gamepads/Controllers/poseEnabledController";
import { ShadowGenerator as BabylonjsCoreShadowGenerator, ICustomShaderOptions as BabylonjsCoreICustomShaderOptions } from "@babylonjs/core/Lights/Shadows/shadowGenerator";
import { NodeMaterialConnectionPointCompatibilityStates as BabylonjsCoreNodeMaterialConnectionPointCompatibilityStates, NodeMaterialConnectionPointDirection as BabylonjsCoreNodeMaterialConnectionPointDirection } from "@babylonjs/core/Materials/Node/nodeMaterialBlockConnectionPoint";
import { BaseTexture as BabylonjsCoreBaseTexture } from "@babylonjs/core/Materials/Textures/baseTexture";
import { InternalTextureSource as BabylonjsCoreInternalTextureSource } from "@babylonjs/core/Materials/Textures/internalTexture";
import { Control as BabylonjsGuiControl } from "@babylonjs/gui/2D/controls/control";
import { TextWrapping as BabylonjsGuiTextWrapping } from "@babylonjs/gui/2D/controls/textBlock";
import { Control3D as BabylonjsGuiControl3D } from "@babylonjs/gui/3D/controls/control3D";
import { TrigonometryBlockOperations as BabylonjsCoreTrigonometryBlockOperations } from "@babylonjs/core/Materials/Node/Blocks/trigonometryBlock";
import { WaveBlockKind as BabylonjsCoreWaveBlockKind } from "@babylonjs/core/Materials/Node/Blocks/waveBlock";
import { NodeMaterialBlockConnectionPointMode as BabylonjsCoreNodeMaterialBlockConnectionPointMode } from "@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockConnectionPointMode";
import { NodeMaterialBlockConnectionPointTypes as BabylonjsCoreNodeMaterialBlockConnectionPointTypes } from "@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockConnectionPointTypes";
import { NodeMaterialBlockTargets as BabylonjsCoreNodeMaterialBlockTargets } from "@babylonjs/core/Materials/Node/Enums/nodeMaterialBlockTargets";
import { NodeMaterialSystemValues as BabylonjsCoreNodeMaterialSystemValues } from "@babylonjs/core/Materials/Node/Enums/nodeMaterialSystemValues";
import { AnimatedInputBlockTypes as BabylonjsCoreAnimatedInputBlockTypes } from "@babylonjs/core/Materials/Node/Blocks/Input/animatedInputBlockTypes";
import { Animation as BabylonjsCoreAnimation } from "@babylonjs/core/Animations/animation";
import { Observable as BabylonjsCoreObservable } from "@babylonjs/core/Misc/observable";
import { CubeTexture as BabylonjsCoreCubeTexture } from "@babylonjs/core/Materials/Textures/cubeTexture";
import { Vector3 as BabylonjsCoreVector3, Matrix as BabylonjsCoreMatrix, Vector2 as BabylonjsCoreVector2, Quaternion as BabylonjsCoreQuaternion } from "@babylonjs/core/Maths/math.vector";
import { RawCubeTexture as BabylonjsCoreRawCubeTexture } from "@babylonjs/core/Materials/Textures/rawCubeTexture";
import { Texture as BabylonjsCoreTexture } from "@babylonjs/core/Materials/Textures/texture";
import { ThinEngine as BabylonjsCoreThinEngine } from "@babylonjs/core/Engines/thinEngine";
import { RawTexture as BabylonjsCoreRawTexture } from "@babylonjs/core/Materials/Textures/rawTexture";
import { ProceduralTexture as BabylonjsCoreProceduralTexture } from "@babylonjs/core/Materials/Textures/Procedurals/proceduralTexture";
import { Color3 as BabylonjsCoreColor3, Color4 as BabylonjsCoreColor4 } from "@babylonjs/core/Maths/math.color";
import { CustomProceduralTexture as BabylonjsCoreCustomProceduralTexture } from "@babylonjs/core/Materials/Textures/Procedurals/customProceduralTexture";
import { NoiseProceduralTexture as BabylonjsCoreNoiseProceduralTexture } from "@babylonjs/core/Materials/Textures/Procedurals/noiseProceduralTexture";
import { RenderTargetTexture as BabylonjsCoreRenderTargetTexture } from "@babylonjs/core/Materials/Textures/renderTargetTexture";
import { SmartArray as BabylonjsCoreSmartArray, ISmartArrayLike as BabylonjsCoreISmartArrayLike } from "@babylonjs/core/Misc/smartArray";
import { SubMesh as BabylonjsCoreSubMesh } from "@babylonjs/core/Meshes/subMesh";
import { AbstractMesh as BabylonjsCoreAbstractMesh } from "@babylonjs/core/Meshes/abstractMesh";
import { Engine as BabylonjsCoreEngine } from "@babylonjs/core/Engines/engine";
import { MirrorTexture as BabylonjsCoreMirrorTexture } from "@babylonjs/core/Materials/Textures/mirrorTexture";
import { Plane as BabylonjsCorePlane } from "@babylonjs/core/Maths/math.plane";
import { MultiRenderTarget as BabylonjsCoreMultiRenderTarget, IMultiRenderTargetOptions as BabylonjsCoreIMultiRenderTargetOptions } from "@babylonjs/core/Materials/Textures/multiRenderTarget";
import { RefractionTexture as BabylonjsCoreRefractionTexture } from "@babylonjs/core/Materials/Textures/refractionTexture";
import { MultiviewRenderTarget as BabylonjsCoreMultiviewRenderTarget } from "@babylonjs/core/Materials/Textures/MultiviewRenderTarget";
import { VideoTexture as BabylonjsCoreVideoTexture, VideoTextureSettings as BabylonjsCoreVideoTextureSettings } from "@babylonjs/core/Materials/Textures/videoTexture";
import { DynamicTexture as BabylonjsCoreDynamicTexture } from "@babylonjs/core/Materials/Textures/dynamicTexture";
import { ClipboardInfo as BabylonjsCoreClipboardInfo } from "@babylonjs/core/Events/clipboardEvents";
import { RawTexture3D as BabylonjsCoreRawTexture3D } from "@babylonjs/core/Materials/Textures/rawTexture3D";
import { RawTexture2DArray as BabylonjsCoreRawTexture2DArray } from "@babylonjs/core/Materials/Textures/rawTexture2DArray";
import { ColorGradingTexture as BabylonjsCoreColorGradingTexture } from "@babylonjs/core/Materials/Textures/colorGradingTexture";
import { EquiRectangularCubeTexture as BabylonjsCoreEquiRectangularCubeTexture } from "@babylonjs/core/Materials/Textures/equiRectangularCubeTexture";
import { HDRCubeTexture as BabylonjsCoreHDRCubeTexture } from "@babylonjs/core/Materials/Textures/hdrCubeTexture";
import { HtmlElementTexture as BabylonjsCoreHtmlElementTexture, IHtmlElementTextureOptions as BabylonjsCoreIHtmlElementTextureOptions } from "@babylonjs/core/Materials/Textures/htmlElementTexture";
import { Effect as BabylonjsCoreEffect } from "@babylonjs/core/Materials/effect";
import { IShadowLight as BabylonjsCoreIShadowLight } from "@babylonjs/core/Lights/shadowLight";
import { WebVRController as BabylonjsCoreWebVRController } from "@babylonjs/core/Gamepads/Controllers/webVRController";
import { PickingInfo as BabylonjsCorePickingInfo } from "@babylonjs/core/Collisions/pickingInfo";
import { WebXRDefaultExperience as BabylonjsCoreWebXRDefaultExperience } from "@babylonjs/core/XR/webXRDefaultExperience";
import { SolidParticleSystem as BabylonjsCoreSolidParticleSystem } from "@babylonjs/core/Particles/solidParticleSystem";
import { AbstractActionManager as BabylonjsCoreAbstractActionManager } from "@babylonjs/core/Actions/abstractActionManager";
import { AnimationPropertiesOverride as BabylonjsCoreAnimationPropertiesOverride } from "@babylonjs/core/Animations/animationPropertiesOverride";
import { Collider as BabylonjsCoreCollider } from "@babylonjs/core/Collisions/collider";
import { Ray as BabylonjsCoreRay } from "@babylonjs/core/Culling/ray";
import { IOfflineProvider as BabylonjsCoreIOfflineProvider } from "@babylonjs/core/Offline/IOfflineProvider";
import { RenderingGroupInfo as BabylonjsCoreRenderingGroupInfo } from "@babylonjs/core/Rendering/renderingManager";
import { Geometry as BabylonjsCoreGeometry } from "@babylonjs/core/Meshes/geometry";
import { KeyboardInfo as BabylonjsCoreKeyboardInfo, KeyboardInfoPre as BabylonjsCoreKeyboardInfoPre } from "@babylonjs/core/Events/keyboardEvents";
import { Skeleton as BabylonjsCoreSkeleton } from "@babylonjs/core/Bones/skeleton";
import { TransformNode as BabylonjsCoreTransformNode } from "@babylonjs/core/Meshes/transformNode";
import { PointerEventTypes as BabylonjsCorePointerEventTypes, PointerInfo as BabylonjsCorePointerInfo, PointerInfoPre as BabylonjsCorePointerInfoPre } from "@babylonjs/core/Events/pointerEvents";
import { PostProcess as BabylonjsCorePostProcess } from "@babylonjs/core/PostProcesses/postProcess";
import { PostProcessManager as BabylonjsCorePostProcessManager } from "@babylonjs/core/PostProcesses/postProcessManager";
import { IPhysicsEnginePlugin as BabylonjsCoreIPhysicsEnginePlugin } from "@babylonjs/core/Physics/IPhysicsEngine";

export type BabylonNode<T> = {
    children?: ReactNode;
    key?: Key;
    onCreated?: (instance: T, scene: BabylonjsCoreScene) => void;
    ref?: Ref<ReactNode>;
};

declare global {
    namespace JSX {
        interface IntrinsicElements {
            baseTexture: FiberBaseTextureProps & FiberBaseTexturePropsCtor & BabylonNode<BabylonjsCoreBaseTexture>;
            cubeTexture: FiberCubeTextureProps & FiberCubeTexturePropsCtor & BabylonNode<BabylonjsCoreCubeTexture>;
            rawCubeTexture: FiberRawCubeTextureProps & FiberRawCubeTexturePropsCtor & BabylonNode<BabylonjsCoreRawCubeTexture>;
            texture: FiberTextureProps & FiberTexturePropsCtor & BabylonNode<BabylonjsCoreTexture>;
            rawTexture: FiberRawTextureProps & FiberRawTexturePropsCtor & BabylonNode<BabylonjsCoreRawTexture>;
            proceduralTexture: FiberProceduralTextureProps & FiberProceduralTexturePropsCtor & BabylonNode<BabylonjsCoreProceduralTexture>;
            customProceduralTexture: FiberCustomProceduralTextureProps & FiberCustomProceduralTexturePropsCtor & BabylonNode<BabylonjsCoreCustomProceduralTexture>;
            noiseProceduralTexture: FiberNoiseProceduralTextureProps & FiberNoiseProceduralTexturePropsCtor & BabylonNode<BabylonjsCoreNoiseProceduralTexture>;
            renderTargetTexture: FiberRenderTargetTextureProps & FiberRenderTargetTexturePropsCtor & BabylonNode<BabylonjsCoreRenderTargetTexture>;
            mirrorTexture: FiberMirrorTextureProps & FiberMirrorTexturePropsCtor & BabylonNode<BabylonjsCoreMirrorTexture>;
            multiRenderTarget: FiberMultiRenderTargetProps & FiberMultiRenderTargetPropsCtor & BabylonNode<BabylonjsCoreMultiRenderTarget>;
            refractionTexture: FiberRefractionTextureProps & FiberRefractionTexturePropsCtor & BabylonNode<BabylonjsCoreRefractionTexture>;
            multiviewRenderTarget: FiberMultiviewRenderTargetProps & FiberMultiviewRenderTargetPropsCtor & BabylonNode<BabylonjsCoreMultiviewRenderTarget>;
            videoTexture: FiberVideoTextureProps & FiberVideoTexturePropsCtor & BabylonNode<BabylonjsCoreVideoTexture>;
            dynamicTexture: FiberDynamicTextureProps & FiberDynamicTexturePropsCtor & BabylonNode<BabylonjsCoreDynamicTexture>;
            advancedDynamicTexture: FiberAdvancedDynamicTextureProps & FiberAdvancedDynamicTexturePropsCtor & BabylonNode<BabylonjsGuiAdvancedDynamicTexture>;
            rawTexture3D: FiberRawTexture3DProps & FiberRawTexture3DPropsCtor & BabylonNode<BabylonjsCoreRawTexture3D>;
            rawTexture2DArray: FiberRawTexture2DArrayProps & FiberRawTexture2DArrayPropsCtor & BabylonNode<BabylonjsCoreRawTexture2DArray>;
            colorGradingTexture: FiberColorGradingTextureProps & FiberColorGradingTexturePropsCtor & BabylonNode<BabylonjsCoreColorGradingTexture>;
            equiRectangularCubeTexture: FiberEquiRectangularCubeTextureProps & FiberEquiRectangularCubeTexturePropsCtor & BabylonNode<BabylonjsCoreEquiRectangularCubeTexture>;
            hdrCubeTexture: FiberHDRCubeTextureProps & FiberHDRCubeTexturePropsCtor & BabylonNode<BabylonjsCoreHDRCubeTexture>;
            htmlElementTexture: FiberHtmlElementTextureProps & FiberHtmlElementTexturePropsCtor & BabylonNode<BabylonjsCoreHtmlElementTexture>;
            gui3DManager: FiberGUI3DManagerProps & FiberGUI3DManagerPropsCtor & BabylonNode<BabylonjsGuiGUI3DManager>;
            shadowGenerator: FiberShadowGeneratorProps & FiberShadowGeneratorPropsCtor & BabylonNode<BabylonjsCoreShadowGenerator>;
            environmentHelper: FiberEnvironmentHelperProps & FiberEnvironmentHelperPropsCtor & BabylonNode<BabylonjsCoreEnvironmentHelper>;
            physicsImpostor: FiberPhysicsImpostorProps & FiberPhysicsImpostorPropsCtor & BabylonNode<BabylonjsCorePhysicsImpostor>;
            vrExperienceHelper: FiberVRExperienceHelperProps & FiberVRExperienceHelperPropsCtor & BabylonNode<BabylonjsCoreVRExperienceHelper>;
            dynamicTerrain: FiberDynamicTerrainProps & FiberDynamicTerrainPropsCtor & BabylonNode<ExtensionsDynamicTerrain>;
            model: ModelProps & BabylonNode<BabylonjsCoreAbstractMesh>;
        }
    }
}

export type FiberBaseTextureProps = {
    animations?: BabylonjsCoreAnimation[];
    anisotropicFilteringLevel?: number;
    coordinatesIndex?: number;
    coordinatesMode?: number;
    delayLoadState?: number;
    gammaSpace?: boolean;
    getAlphaFromRGB?: boolean;
    hasAlpha?: boolean;
    invertZ?: boolean;
    irradianceTexture?: BabylonjsCoreBaseTexture;
    is2DArray?: boolean;
    is3D?: boolean;
    isCube?: boolean;
    isRenderTarget?: boolean;
    isRGBD?: boolean;
    level?: number;
    linearSpecularLOD?: boolean;
    lodGenerationOffset?: number;
    lodGenerationScale?: number;
    lodLevelInAlpha?: boolean;
    metadata?: any;
    name?: string;
    onDispose?: () => void;
    onDisposeObservable?: any;
    reservedDataStore?: any;
    uniqueId?: number;
    wrapR?: number;
    wrapU?: number;
    wrapV?: number;
} & CustomProps;
export type FiberBaseTexturePropsCtor = {};
export type FiberCubeTextureProps = {
    boundingBoxPosition?: BabylonjsCoreVector3;
    boundingBoxSize?: BabylonjsCoreVector3;
    onLoadObservable?: any;
    rotationY?: number;
    setReflectionTextureMatrix?: any;
    url?: string;
} & FiberBaseTextureProps;
export type FiberCubeTexturePropsCtor = {
    rootUrl: string;
    extensions?: string[];
    noMipmap?: boolean;
    files?: string[];
    onLoad?: () => void;
    onError?: (message?: string, exception?: any) => void;
    format?: number;
    prefiltered?: boolean;
    forcedExtension?: any;
    createPolynomials?: boolean;
    lodScale?: number;
    lodOffset?: number;
};
export type FiberRawCubeTextureProps = {} & FiberCubeTextureProps;
export type FiberRawCubeTexturePropsCtor = {
    data: ArrayBufferView[];
    size: number;
    format?: number;
    type?: number;
    generateMipMaps?: boolean;
    invertY?: boolean;
    samplingMode?: number;
    compression?: string;
};
export type FiberTextureProps = {
    inspectableCustomProperties?: BabylonjsCoreIInspectable[];
    isBlocking?: boolean;
    onLoadObservable?: any;
    uAng?: number;
    uOffset?: number;
    url?: string;
    uRotationCenter?: number;
    uScale?: number;
    vAng?: number;
    vOffset?: number;
    vRotationCenter?: number;
    vScale?: number;
    wAng?: number;
    wRotationCenter?: number;
} & FiberBaseTextureProps;
export type FiberTexturePropsCtor = {
    url: string;
    noMipmap?: boolean;
    invertY?: boolean;
    samplingMode?: number;
    onLoad?: () => void;
    onError?: (message?: string, exception?: any) => void;
    buffer?: string | ArrayBufferView | ArrayBuffer | HTMLImageElement | Blob | ImageBitmap;
    deleteBuffer?: boolean;
    format?: number;
    mimeType?: string;
};
export type FiberRawTextureProps = {
    format?: number;
} & FiberTextureProps;
export type FiberRawTexturePropsCtor = {
    data: ArrayBufferView;
    width: number;
    height: number;
    format: number;
    generateMipMaps?: boolean;
    invertY?: boolean;
    samplingMode?: number;
    type?: number;
};
export type FiberProceduralTextureProps = {
    autoClear?: boolean;
    isCube?: boolean;
    isEnabled?: boolean;
    onGenerated?: () => void;
    onGeneratedObservable?: any;
    refreshRate?: number;
    setColor3?: any;
    setColor4?: any;
    setFloat?: any;
    setFloats?: any;
    setFragment?: any;
    setInt?: any;
    setMatrix?: any;
    setTexture?: any;
    setVector2?: any;
    setVector3?: any;
} & FiberTextureProps;
export type FiberProceduralTexturePropsCtor = {
    name: string;
    size: any;
    fragment: any;
    fallbackTexture?: BabylonjsCoreTexture;
    generateMipMaps?: boolean;
    isCube?: boolean;
};
export type FiberCustomProceduralTextureProps = {
    animate?: boolean;
} & FiberProceduralTextureProps;
export type FiberCustomProceduralTexturePropsCtor = {
    name: string;
    texturePath: string;
    size: number;
    fallbackTexture?: BabylonjsCoreTexture;
    generateMipMaps?: boolean;
};
export type FiberNoiseProceduralTextureProps = {
    animationSpeedFactor?: number;
    brightness?: number;
    octaves?: number;
    persistence?: number;
} & FiberProceduralTextureProps;
export type FiberNoiseProceduralTexturePropsCtor = {
    name: string;
    size?: number;
    fallbackTexture?: BabylonjsCoreTexture;
    generateMipMaps?: boolean;
};
export type FiberRenderTargetTextureProps = {
    activeCamera?: BabylonjsCoreCamera;
    boundingBoxPosition?: BabylonjsCoreVector3;
    boundingBoxSize?: BabylonjsCoreVector3;
    clearColor?: BabylonjsCoreColor4;
    coordinatesMode?: number;
    customRenderFunction?: (opaqueSubMeshes: BabylonjsCoreSmartArray<BabylonjsCoreSubMesh>, alphaTestSubMeshes: BabylonjsCoreSmartArray<BabylonjsCoreSubMesh>, transparentSubMeshes: BabylonjsCoreSmartArray<BabylonjsCoreSubMesh>, depthOnlySubMeshes: BabylonjsCoreSmartArray<BabylonjsCoreSubMesh>, beforeTransparents?: () => void) => void;
    getCustomRenderList?: (layerOrFace: number, renderList: readonly BabylonjsCoreAbstractMesh[], renderListLength: number) => BabylonjsCoreAbstractMesh[];
    ignoreCameraViewport?: boolean;
    isCube?: boolean;
    onAfterRender?: (faceIndex: number) => void;
    onAfterRenderObservable?: any;
    onAfterUnbind?: () => void;
    onAfterUnbindObservable?: any;
    onBeforeBindObservable?: any;
    onBeforeRender?: (faceIndex: number) => void;
    onBeforeRenderObservable?: any;
    onClear?: (Engine: BabylonjsCoreEngine) => void;
    onClearObservable?: any;
    onResizeObservable?: any;
    refreshRate?: number;
    renderList?: BabylonjsCoreAbstractMesh[];
    renderListPredicate?: (AbstractMesh: BabylonjsCoreAbstractMesh) => boolean;
    renderParticles?: boolean;
    renderSprites?: boolean;
    renderToTarget?: any;
    samples?: number;
    setRenderingAutoClearDepthStencil?: any;
    setRenderingOrder?: any;
    useCameraPostProcesses?: boolean;
} & FiberTextureProps;
export type FiberRenderTargetTexturePropsCtor = {
    name: string;
    size: number | { width: number; height: number; layers?: number; } | { ratio: number; };
    generateMipMaps?: boolean;
    doNotChangeAspectRatio?: boolean;
    type?: number;
    isCube?: boolean;
    samplingMode?: number;
    generateDepthBuffer?: boolean;
    generateStencilBuffer?: boolean;
    isMulti?: boolean;
    format?: number;
    delayAllocation?: boolean;
};
export type FiberMirrorTextureProps = {
    adaptiveBlurKernel?: number;
    blurKernel?: number;
    blurKernelX?: number;
    blurKernelY?: number;
    blurRatio?: number;
    mirrorPlane?: BabylonjsCorePlane;
    scene?: any;
} & FiberRenderTargetTextureProps;
export type FiberMirrorTexturePropsCtor = {
    name: string;
    size: number | { width: number; height: number; } | { ratio: number; };
    generateMipMaps?: boolean;
    type?: number;
    samplingMode?: number;
    generateDepthBuffer?: boolean;
};
export type FiberMultiRenderTargetProps = {
    samples?: number;
    wrapU?: number;
    wrapV?: number;
} & FiberRenderTargetTextureProps;
export type FiberMultiRenderTargetPropsCtor = {
    name: string;
    size: any;
    count: number;
    options?: BabylonjsCoreIMultiRenderTargetOptions;
};
export type FiberRefractionTextureProps = {
    depth?: number;
    refractionPlane?: BabylonjsCorePlane;
} & FiberRenderTargetTextureProps;
export type FiberRefractionTexturePropsCtor = {
    name: string;
    size: number;
    generateMipMaps?: boolean;
};
export type FiberMultiviewRenderTargetProps = {} & FiberRenderTargetTextureProps;
export type FiberMultiviewRenderTargetPropsCtor = {
    size?: number | { width: number; height: number; } | { ratio: number; };
};
export type FiberVideoTextureProps = {
    reset?: any;
} & FiberTextureProps;
export type FiberVideoTexturePropsCtor = {
    name: string;
    src: string | string[] | HTMLVideoElement;
    generateMipMaps?: boolean;
    invertY?: boolean;
    samplingMode?: number;
    settings?: BabylonjsCoreVideoTextureSettings;
};
export type FiberDynamicTextureProps = {} & FiberTextureProps;
export type FiberDynamicTexturePropsCtor = {
    name: string;
    options: any;
    generateMipMaps: boolean;
    samplingMode?: number;
    format?: number;
};
export type FiberAdvancedDynamicTextureProps = {
    background?: string;
    clipboardData?: string;
    focusedControl?: BabylonjsGuiIFocusableControl;
    idealHeight?: number;
    idealWidth?: number;
    isForeground?: boolean;
    onBeginLayoutObservable?: any;
    onBeginRenderObservable?: any;
    onClipboardCopy?: any;
    onClipboardCut?: any;
    onClipboardObservable?: any;
    onClipboardPaste?: any;
    onControlPickedObservable?: any;
    onEndLayoutObservable?: any;
    onEndRenderObservable?: any;
    premulAlpha?: boolean;
    renderAtIdealSize?: boolean;
    renderScale?: number;
    useInvalidateRectOptimization?: boolean;
    useSmallestIdeal?: boolean;
} & FiberDynamicTextureProps;
export type FiberADTForMeshPropsCtor = {
    mesh: BabylonjsCoreAbstractMesh;
    width?: number;
    height?: number;
    supportPointerMove?: boolean;
    onlyAlphaTesting?: boolean;
};
export type FiberADTFullscreenUIPropsCtor = {
    name: string;
    foreground?: boolean;
    sampling?: number;
};
export type FiberAdvancedDynamicTexturePropsCtor = {
    name: string;
    width: number;
    height: number;
    generateMipMaps?: boolean;
    samplingMode?: number;
};
export type FiberRawTexture3DProps = {
    format?: number;
} & FiberTextureProps;
export type FiberRawTexture3DPropsCtor = {
    data: ArrayBufferView;
    width: number;
    height: number;
    depth: number;
    format: number;
    generateMipMaps?: boolean;
    invertY?: boolean;
    samplingMode?: number;
    textureType?: number;
};
export type FiberRawTexture2DArrayProps = {
    format?: number;
} & FiberTextureProps;
export type FiberRawTexture2DArrayPropsCtor = {
    data: ArrayBufferView;
    width: number;
    height: number;
    depth: number;
    format: number;
    generateMipMaps?: boolean;
    invertY?: boolean;
    samplingMode?: number;
    textureType?: number;
};
export type FiberColorGradingTextureProps = {
    load3dlTexture?: any;
    loadTexture?: any;
    url?: string;
} & FiberBaseTextureProps;
export type FiberColorGradingTexturePropsCtor = {
    url: string;
};
export type FiberEquiRectangularCubeTextureProps = {
    coordinatesMode?: number;
    getFloat32ArrayFromArrayBuffer?: any;
    loadImage?: any;
    loadTexture?: any;
    url?: string;
} & FiberBaseTextureProps;
export type FiberEquiRectangularCubeTexturePropsCtor = {
    url: string;
    size: number;
    noMipmap?: boolean;
    gammaSpace?: boolean;
    onLoad?: () => void;
    onError?: (message?: string, exception?: any) => void;
};
export type FiberHDRCubeTextureProps = {
    boundingBoxPosition?: BabylonjsCoreVector3;
    boundingBoxSize?: BabylonjsCoreVector3;
    coordinatesMode?: number;
    isBlocking?: boolean;
    loadTexture?: any;
    rotationY?: number;
    setReflectionTextureMatrix?: any;
    url?: string;
} & FiberBaseTextureProps;
export type FiberHDRCubeTexturePropsCtor = {
    url: string;
    size: number;
    noMipmap?: boolean;
    generateHarmonics?: boolean;
    gammaSpace?: boolean;
    reserved?: boolean;
    onLoad?: () => void;
    onError?: (message?: string, exception?: any) => void;
};
export type FiberHtmlElementTextureProps = {
    element?: HTMLVideoElement | HTMLCanvasElement;
} & FiberBaseTextureProps;
export type FiberHtmlElementTexturePropsCtor = {
    name: string;
    element: HTMLVideoElement | HTMLCanvasElement;
    options: BabylonjsCoreIHtmlElementTextureOptions;
};
export type FiberGUI3DManagerProps = {
    onPickedPointChangedObservable?: any;
} & CustomProps;
export type FiberGUI3DManagerPropsCtor = {};
export type FiberShadowGeneratorProps = {
    bias?: number;
    blurBoxOffset?: number;
    blurKernel?: number;
    blurScale?: number;
    contactHardeningLightSizeUVRatio?: number;
    customShaderOptions?: BabylonjsCoreICustomShaderOptions;
    darkness?: number;
    depthScale?: number;
    filter?: number;
    filteringQuality?: number;
    forceBackFacesOnly?: boolean;
    frustumEdgeFalloff?: number;
    normalBias?: number;
    onAfterShadowMapRenderMeshObservable?: any;
    onAfterShadowMapRenderObservable?: any;
    onBeforeShadowMapRenderMeshObservable?: any;
    onBeforeShadowMapRenderObservable?: any;
    setDarkness?: any;
    setTransparencyShadow?: any;
    transparencyShadow?: boolean;
    useBlurCloseExponentialShadowMap?: boolean;
    useBlurExponentialShadowMap?: boolean;
    useCloseExponentialShadowMap?: boolean;
    useContactHardeningShadow?: boolean;
    useExponentialShadowMap?: boolean;
    useKernelBlur?: boolean;
    usePercentageCloserFiltering?: boolean;
    usePoissonSampling?: boolean;
} & CustomProps;
export type FiberShadowGeneratorPropsCtor = {
    mapSize: number;
    light?: BabylonjsCoreIShadowLight;
    usefulFloatFirst?: boolean;
};
export type FiberEnvironmentHelperProps = {
    onErrorObservable?: any;
    setMainColor?: any;
} & CustomProps;
export type FiberEnvironmentHelperPropsCtor = {
    options: Partial<BabylonjsCoreIEnvironmentHelperOptions>;
};
export type FiberPhysicsImpostorProps = {
    afterStep?: () => void;
    beforeStep?: () => void;
    friction?: number;
    mass?: number;
    object?: BabylonjsCoreIPhysicsEnabledObject;
    onCollide?: (e: { body: any; }) => void;
    onCollideEvent?: (collider: BabylonjsCorePhysicsImpostor, collidedWith: BabylonjsCorePhysicsImpostor) => void;
    parent?: BabylonjsCorePhysicsImpostor;
    physicsBody?: any;
    positionIterations?: number;
    pressure?: number;
    restitution?: number;
    segments?: number;
    setAngularVelocity?: any;
    setDeltaPosition?: any;
    setDeltaRotation?: any;
    setLinearVelocity?: any;
    setMass?: any;
    setParam?: any;
    soft?: boolean;
    stiffness?: number;
    type?: number;
    uniqueId?: number;
    velocityIterations?: number;
} & CustomProps;
export type FiberPhysicsImpostorPropsCtor = {
    object?: BabylonjsCoreIPhysicsEnabledObject;
    type: number;
    _options?: BabylonjsCorePhysicsImpostorParameters;
};
export type FiberVRExperienceHelperProps = {
    beforeRender?: any;
    completeVRInit?: any;
    displayGaze?: boolean;
    displayLaserPointer?: boolean;
    displayVRButton?: any;
    enableGazeEvenWhenNoPointerLock?: boolean;
    exitVROnDoubleTap?: boolean;
    gazeTrackerMesh?: BabylonjsCoreMesh;
    meshSelectionPredicate?: (mesh: BabylonjsCoreAbstractMesh) => boolean;
    moveButtonToBottomRight?: any;
    onAfterCameraTeleport?: any;
    onAfterEnteringVRObservable?: any;
    onBeforeCameraTeleport?: any;
    onControllerMeshLoadedObservable?: any;
    onEnteringVRObservable?: any;
    onExitingVRObservable?: any;
    onMeshSelectedWithController?: any;
    onNewMeshPicked?: any;
    onNewMeshSelected?: any;
    onSelectedMeshUnselected?: any;
    onVRDisplayChanged?: any;
    onVrDisplayPresentChange?: any;
    position?: BabylonjsCoreVector3;
    raySelectionPredicate?: (mesh: BabylonjsCoreAbstractMesh) => boolean;
    requestPointerLockOnFullScreen?: boolean;
    setGazeColor?: any;
    setLaserColor?: any;
    setLaserLightingState?: any;
    teleportationEnabled?: boolean;
    teleportationTarget?: BabylonjsCoreMesh;
    updateButtonVisibility?: any;
    updateControllerLaserColor?: boolean;
    updateGazeTrackerColor?: boolean;
    updateGazeTrackerScale?: boolean;
    webVROptions?: BabylonjsCoreVRExperienceHelperOptions;
    xr?: BabylonjsCoreWebXRDefaultExperience;
    xrTestDone?: boolean;
} & CustomProps;
export type FiberVRExperienceHelperPropsCtor = {
    webVROptions?: BabylonjsCoreVRExperienceHelperOptions;
};
export type FiberDynamicTerrainProps = {
    camera?: BabylonjsCoreCamera;
    cameraLODCorrection?: number;
    computeNormals?: boolean;
    initialLOD?: number;
    isAlwaysVisible?: boolean;
    LODLimits?: number[];
    LODNegativeX?: boolean;
    LODNegativeZ?: boolean;
    LODPositiveX?: boolean;
    LODPositiveZ?: boolean;
    mapColors?: number[] | Float32Array;
    mapData?: number[] | Float32Array;
    mapNormals?: number[] | Float32Array;
    mapSubX?: number;
    mapSubZ?: number;
    mapUVs?: number[] | Float32Array;
    name?: string;
    precomputeNormalsFromMap?: boolean;
    refreshEveryFrame?: boolean;
    shiftFromCamera?: { x: number; z: number; };
    subToleranceX?: number;
    subToleranceZ?: number;
    useCustomVertexFunction?: boolean;
} & CustomProps;
export type FiberDynamicTerrainPropsCtor = {
    name: string;
    terrainSub?: number;
    mapData?: number[] | Float32Array;
    mapSubX?: number;
    mapSubZ?: number;
    mapUVs?: number[] | Float32Array;
    mapColors?: number[] | Float32Array;
    mapNormals?: number[] | Float32Array;
    invertSide?: boolean;
    camera?: BabylonjsCoreCamera;
    SPmapData?: number[][] | Float32Array[];
    sps?: BabylonjsCoreSolidParticleSystem;
    SPcolorData?: number[][] | Float32Array[];
    SPuvData?: number[][] | Float32Array[];
    intializedCallback?: any;
};
export type FiberSceneProps = {
    actionManager?: BabylonjsCoreAbstractActionManager;
    activeCamera?: BabylonjsCoreCamera;
    activeCameras?: BabylonjsCoreCamera[];
    afterCameraRender?: () => void;
    afterRender?: () => void;
    ambientColor?: BabylonjsCoreColor3;
    animationPropertiesOverride?: BabylonjsCoreAnimationPropertiesOverride;
    animationsEnabled?: boolean;
    animationTimeScale?: number;
    autoClear?: boolean;
    autoClearDepthAndStencil?: boolean;
    beforeCameraRender?: () => void;
    beforeRender?: () => void;
    blockfreeActiveMeshesAndRenderingGroups?: boolean;
    blockMaterialDirtyMechanism?: boolean;
    cameraToUseForPointers?: BabylonjsCoreCamera;
    clearColor?: BabylonjsCoreColor4;
    clipPlane?: BabylonjsCorePlane;
    clipPlane2?: BabylonjsCorePlane;
    clipPlane3?: BabylonjsCorePlane;
    clipPlane4?: BabylonjsCorePlane;
    clipPlane5?: BabylonjsCorePlane;
    clipPlane6?: BabylonjsCorePlane;
    collisionsEnabled?: boolean;
    constantlyUpdateMeshUnderPointer?: boolean;
    customLODSelector?: (mesh: BabylonjsCoreAbstractMesh, camera: BabylonjsCoreCamera) => BabylonjsCoreAbstractMesh;
    customRenderTargets?: BabylonjsCoreRenderTargetTexture[];
    defaultCursor?: string;
    defaultMaterial?: BabylonjsCoreMaterial;
    deleteCompoundImpostor?: any;
    disableOfflineSupportExceptionRules?: RegExp[];
    dispatchAllSubMeshesOfActiveMeshes?: boolean;
    doNotHandleCursors?: boolean;
    DoubleClickDelay?: number;
    DragMovementThreshold?: number;
    dumpNextRenderTargets?: boolean;
    enablePhysics?: any;
    environmentBRDFTexture?: BabylonjsCoreBaseTexture;
    environmentIntensity?: number;
    environmentTexture?: BabylonjsCoreBaseTexture;
    ExclusiveDoubleClickMode?: boolean;
    fogColor?: BabylonjsCoreColor3;
    fogDensity?: number;
    fogEnabled?: boolean;
    fogEnd?: number;
    fogMode?: number;
    fogStart?: number;
    forcePointsCloud?: boolean;
    forceWireframe?: boolean;
    geometriesByUniqueId?: any;
    getActiveMeshCandidates?: () => BabylonjsCoreISmartArrayLike<BabylonjsCoreAbstractMesh>;
    getActiveSubMeshCandidates?: (mesh: BabylonjsCoreAbstractMesh) => BabylonjsCoreISmartArrayLike<BabylonjsCoreSubMesh>;
    getCollidingSubMeshCandidates?: (mesh: BabylonjsCoreAbstractMesh, collider: BabylonjsCoreCollider) => BabylonjsCoreISmartArrayLike<BabylonjsCoreSubMesh>;
    getDeterministicFrameTime?: () => number;
    getIntersectingSubMeshCandidates?: (mesh: BabylonjsCoreAbstractMesh, localRay: BabylonjsCoreRay) => BabylonjsCoreISmartArrayLike<BabylonjsCoreSubMesh>;
    gravity?: BabylonjsCoreVector3;
    hoverCursor?: string;
    importedMeshesFiles?: String[];
    lensFlaresEnabled?: boolean;
    lightsEnabled?: boolean;
    loadingPluginName?: string;
    LongPressDelay?: number;
    metadata?: any;
    offlineProvider?: BabylonjsCoreIOfflineProvider;
    onActiveCameraChanged?: any;
    onAfterActiveMeshesEvaluationObservable?: any;
    onAfterAnimationsObservable?: any;
    onAfterCameraRenderObservable?: any;
    onAfterDrawPhaseObservable?: any;
    onAfterParticlesRenderingObservable?: any;
    onAfterPhysicsObservable?: BabylonjsCoreObservable<BabylonjsCoreScene>;
    onAfterRenderCameraObservable?: any;
    onAfterRenderingGroupObservable?: any;
    onAfterRenderObservable?: any;
    onAfterRenderTargetsRenderObservable?: any;
    onAfterStepObservable?: any;
    onAnimationFileImportedObservable?: any;
    onBeforeActiveMeshesEvaluationObservable?: any;
    onBeforeAnimationsObservable?: any;
    onBeforeCameraRenderObservable?: any;
    onBeforeDrawPhaseObservable?: any;
    onBeforeParticlesRenderingObservable?: any;
    onBeforePhysicsObservable?: BabylonjsCoreObservable<BabylonjsCoreScene>;
    onBeforeRenderingGroupObservable?: any;
    onBeforeRenderObservable?: any;
    onBeforeRenderTargetsRenderObservable?: any;
    onBeforeStepObservable?: any;
    onCameraRemovedObservable?: any;
    onDataLoadedObservable?: any;
    onDispose?: () => void;
    onDisposeObservable?: any;
    onGeometryRemovedObservable?: any;
    onKeyboardObservable?: any;
    onLightRemovedObservable?: any;
    onMaterialRemovedObservable?: any;
    onMeshImportedObservable?: any;
    onMeshRemovedObservable?: any;
    onNewCameraAddedObservable?: any;
    onNewGeometryAddedObservable?: any;
    onNewLightAddedObservable?: any;
    onNewMaterialAddedObservable?: any;
    onNewMeshAddedObservable?: any;
    onNewSkeletonAddedObservable?: any;
    onNewTextureAddedObservable?: any;
    onNewTransformNodeAddedObservable?: any;
    onPointerDown?: (evt: PointerEvent, pickInfo: BabylonjsCorePickingInfo, type: BabylonjsCorePointerEventTypes) => void;
    onPointerMove?: (evt: PointerEvent, pickInfo: BabylonjsCorePickingInfo, type: BabylonjsCorePointerEventTypes) => void;
    onPointerObservable?: any;
    onPointerPick?: (evt: PointerEvent, pickInfo: BabylonjsCorePickingInfo) => void;
    onPointerUp?: (evt: PointerEvent, pickInfo: BabylonjsCorePickingInfo, type: BabylonjsCorePointerEventTypes) => void;
    onPreKeyboardObservable?: any;
    onPrePointerObservable?: any;
    onReadyObservable?: any;
    onSkeletonRemovedObservable?: any;
    onTextureRemovedObservable?: any;
    onTransformNodeRemovedObservable?: any;
    particlesEnabled?: boolean;
    pointerDownPredicate?: (Mesh: BabylonjsCoreAbstractMesh) => boolean;
    pointerMovePredicate?: (Mesh: BabylonjsCoreAbstractMesh) => boolean;
    pointerUpPredicate?: (Mesh: BabylonjsCoreAbstractMesh) => boolean;
    pointerX?: number;
    pointerY?: number;
    postProcesses?: BabylonjsCorePostProcess[];
    postProcessesEnabled?: boolean;
    postProcessManager?: BabylonjsCorePostProcessManager;
    preventDefaultOnPointerDown?: boolean;
    preventDefaultOnPointerUp?: boolean;
    probesEnabled?: boolean;
    proceduralTexturesEnabled?: boolean;
    renderTargetsEnabled?: boolean;
    requireLightSorting?: boolean;
    reservedDataStore?: any;
    setActiveCameraByID?: any;
    setActiveCameraByName?: any;
    setPointerOverMesh?: any;
    setRenderingAutoClearDepthStencil?: any;
    setRenderingOrder?: any;
    setStepId?: any;
    setTransformMatrix?: any;
    shadowsEnabled?: boolean;
    skeletonsEnabled?: boolean;
    skipFrustumClipping?: boolean;
    spritesEnabled?: boolean;
    texturesEnabled?: boolean;
    useConstantAnimationDeltaTime?: boolean;
    useDelayedTextureLoading?: boolean;
    useRightHandedSystem?: boolean;
} & CustomProps;
